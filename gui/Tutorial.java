package gui;

import java.util.ArrayList;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;

/**
 * In order to teach new players about the game a tutorial scene can be opened
 * both from the main menu and in game for quick reference. This scene is
 * generated here.
 * 
 * @author Adam Hiles
 * @version 04/11/19
 */
public class Tutorial {
	private BorderPane tutorial = new BorderPane();
	private ArrayList<VBox> slides = new ArrayList<VBox>();
	private int slideIndex = 0;
	
	/**
	 * The only constructor takes the width of the primary screen to generate
	 * the tutorial BorderPane and its containing slides.
	 * 
	 * @param winWidth the width of the primary screen
	 */
	public Tutorial(double winWidth) {
		setTutorialPane(winWidth);
	}
	
	/**
	 * The tutorial pane is returned to be set as a root.
	 * 
	 * @return the tutorial BorderPane
	 */
	public BorderPane getTutorial() {
		return tutorial;
	}
	
	/**
	 * Here the tutorial pane is generated by setting the buttons,
	 * EventHandlers, and the slides.
	 * 
	 * @param winWidth the width of the primary screen
	 */
	private void setTutorialPane(double winWidth) {
		setSlides(winWidth); //The content of all the slides are set
		
		BorderPane controls = new BorderPane(); //The area containing the control buttons
		controls.setStyle("-fx-background-color: maroon;");
		
			Button back = new Button("Back"); //The button to go back a slide
			back.setAlignment(Pos.CENTER);
			back.setMinWidth(winWidth / 3);
			back.getStyleClass().add("button-tutorial");
			back.setDisable(true);
			controls.setLeft(back);
			
			Button next = new Button("Next"); //The button to go forward a slide
			next.setAlignment(Pos.CENTER);
			next.setMinWidth(winWidth / 3);
			next.getStyleClass().add("button-tutorial");
			controls.setRight(next);
		
			Button returnButton = new Button("Return"); //The button to return to the previous scene
			returnButton.setAlignment(Pos.CENTER);
			returnButton.setMinWidth(winWidth / 3);
			returnButton.setId("return");
			returnButton.getStyleClass().add("button-tutorial");
			controls.setCenter(returnButton);
			
		tutorial.setBottom(controls);
		tutorial.setCenter(slides.get(slideIndex));
		
		back.setOnAction(new EventHandler<ActionEvent>() { //On press the back button will decrement the slide if available
			@Override
			public void handle(ActionEvent event) {
				slideIndex -= 1;
				tutorial.setCenter(slides.get(slideIndex));
				if (slideIndex == 0) //The back button will be disabled on the first slide
					back.setDisable(true);
				else
					next.setDisable(false);
			}
		});
		
		next.setOnAction(new EventHandler<ActionEvent>() { //On press the next button will increment the slide if available
			@Override
			public void handle(ActionEvent event) {
				slideIndex += 1;
				tutorial.setCenter(slides.get(slideIndex));
				if (slideIndex == slides.size() - 1) //The next button will be disabled on the last slide
					next.setDisable(true);
				else
					back.setDisable(false);
			}
		});
	}
	
	/**
	 * The largest method in this class, all of the text, images, and layout
	 * of the slides in the tutorial are explicitly defined here.
	 * 
	 * @param winWidth the width of the primary screen
	 */
	private void setSlides(double winWidth) {
		VBox slideA = new VBox(); //The first slide containing card and hand information
		slideA.getStyleClass().add("custom-popup");
		slideA.setSpacing(20);
		slideA.setAlignment(Pos.CENTER);
		
			Label titleA = new Label("Card Values and Hand Rankings");
			titleA.setWrapText(true);
			titleA.getStyleClass().add("tutorial-title");
			
			Label bodyA = new Label("Texas Hold ‘em is played with a standard 52-card deck with the thirteen cards in each suit valued as so "
					+ "from highest to lowest as: ace, king, queen, jack, 10, 9, 8, 7, 6, 5, 4, 3, and 2. The ace can also be "
					+ "considered as the lowest valued card in certain straight hands. Each suit is equal in value."
					+ "\n\n"
					+ "The types of five card hands a player can form are shown below from highest to lowest, with examples. Generally, if "
					+ "two players have the same ranking hand the one with the highest is determined first by who has the "
					+ "highest valued main aspect of the hand rank (e.x. a three of a kind with three 8’s is greater than one "
					+ "with three 6’s) and then by who has the highest “kicker” cards, i.e. the left over high cards. For "
					+ "example, if both players had two pairs of queens and 9’s the player with a jack as their fifth card would "
					+ "beat one with a 4.");
			bodyA.setWrapText(true);
			bodyA.setMaxWidth(winWidth * (5.0 / 6.0));
			bodyA.getStyleClass().add("bar-label");
			bodyA.setStyle("-fx-text-size: 24;");
			
			HBox exampleColumns = new HBox();
			exampleColumns.setSpacing(50);
			exampleColumns.setAlignment(Pos.CENTER);
			
				VBox exampleColumnA = new VBox(); //The first column of example hands
				exampleColumnA.setSpacing(10);
				exampleColumnA.setAlignment(Pos.CENTER);
				exampleColumnA.setMaxWidth(700);
				
					Label royalFlushText = new Label("1. ROYAL FLUSH: The five highest valued cards (10, jack, queen, king, and ace) all from the same suit.");
					royalFlushText.getStyleClass().add("bar-label");
					royalFlushText.setWrapText(true);
					ImageView royalFlushImage = new ImageView(new Image("/Images/example-hands/royalFlush.png"));
					
					Label straightFlushText = new Label("2. STRAIGHT FLUSH: Any five cards from the same suit with consecutive values.");
					straightFlushText.getStyleClass().add("bar-label");
					straightFlushText.setWrapText(true);
					ImageView straightFlushImage = new ImageView(new Image("/Images/example-hands/straightFlush.png"));
					
					Label fourOfAKindText = new Label("3. FOUR OF A KIND: A hand that has all four cards of the same value.");
					fourOfAKindText.getStyleClass().add("bar-label");
					fourOfAKindText.setWrapText(true);
					ImageView fourOfAKindImage = new ImageView(new Image("/Images/example-hands/fourOfAKind.png"));
					
					Label fullHouseText = new Label("4. FULL HOUSE: A hand with a set of three cards of the same value and a set of two cards of the same value.");
					fullHouseText.getStyleClass().add("bar-label");
					fullHouseText.setWrapText(true);
					ImageView fullHouseImage = new ImageView(new Image("/Images/example-hands/fullHouse.png"));
					
					Label flushText = new Label("5. FLUSH: Five cards of the same suit in non-consecutive rankings.");
					flushText.getStyleClass().add("bar-label");
					flushText.setWrapText(true);
					ImageView flushImage = new ImageView(new Image("/Images/example-hands/flush.png"));
					
				exampleColumnA.getChildren().addAll(royalFlushText, royalFlushImage, straightFlushText, straightFlushImage, fourOfAKindText,
						fourOfAKindImage, fullHouseText, fullHouseImage, flushText, flushImage);
	
				VBox exampleColumnB = new VBox(); //The second column of example hands
				exampleColumnB.setSpacing(10);
				exampleColumnB.setAlignment(Pos.CENTER);
				exampleColumnB.setMaxWidth(700);
				
					Label straightText = new Label("6. STRAIGHT: Five cards in consecutive rank order but not of the same suit.");
					straightText.getStyleClass().add("bar-label");
					straightText.setWrapText(true);
					ImageView straightImage = new ImageView(new Image("/Images/example-hands/straight.png"));
					
					Label threeOfAKindText = new Label("7. THREE OF A KIND: A hand containing three cards of the same value.");
					threeOfAKindText.getStyleClass().add("bar-label");
					threeOfAKindText.setWrapText(true);
					ImageView threeOfAKindImage = new ImageView(new Image("/Images/example-hands/threeOfAKind.png"));
					
					Label twoPairsText = new Label("8. TWO PAIRS: A hand with two pairs of cards of the same value.");
					twoPairsText.getStyleClass().add("bar-label");
					twoPairsText.setWrapText(true);
					ImageView twoPairsImage = new ImageView(new Image("/Images/example-hands/twoPairs.png"));
					
					Label onePairText = new Label("9. ONE PAIR: A hand with two cards that are the same value.");
					onePairText.getStyleClass().add("bar-label");
					onePairText.setWrapText(true);
					ImageView onePairImage = new ImageView(new Image("/Images/example-hands/onePair.png"));
					
					Label highCardText = new Label("10. HIGH CARD: Any other hand where the cards are non-consecutive, not all of the same suit, and do not have any common values.");
					highCardText.getStyleClass().add("bar-label");
					highCardText.setWrapText(true);
					ImageView highCardImage = new ImageView(new Image("/Images/example-hands/highCard.png"));
					
				exampleColumnB.getChildren().addAll(straightText, straightImage, threeOfAKindText, threeOfAKindImage, twoPairsText,
						twoPairsImage, onePairText, onePairImage, highCardText, highCardImage);
				
		exampleColumns.getChildren().addAll(exampleColumnA, exampleColumnB);
		
		slideA.getChildren().addAll(titleA, bodyA, exampleColumns);
		
		VBox slideB = new VBox(); //The second slide outlining the objective
		slideB.getStyleClass().add("custom-popup");
		slideB.setSpacing(20);
		slideB.setAlignment(Pos.CENTER);
		
			Label titleB = new Label("Objective of the Game");
			titleB.setWrapText(true);
			titleB.getStyleClass().add("tutorial-title");
			
			Label bodyB = new Label("In Texas Hold ‘em each player is dealt two cards, referred to as the “hole”, and uses these along with "
					+ "any of the five shared “community” cards to form the highest possible five-card poker hand. "
					+ "Throughout the game the players make monetary wagers from their available funds, their “stack”, on "
					+ "the ranking of their hand in an attempt to collect the wagers of all players (referred to as “the pot”) and "
					+ "eventually be the only one with money left.");
			bodyB.setWrapText(true);
			bodyB.setMaxWidth(winWidth * (5.0 / 6.0));
			bodyB.getStyleClass().add("tutorial-body");
		
		slideB.getChildren().addAll(titleB, bodyB);
		
		VBox slideC = new VBox(); //The third slide listing all possible actions
		slideC.getStyleClass().add("custom-popup");
		slideC.setSpacing(20);
		slideC.setAlignment(Pos.CENTER);
		
			Label titleC = new Label("Actions");
			titleC.setWrapText(true);
			titleC.getStyleClass().add("tutorial-title");
			
			Label bodyC = new Label("You can carry out several actions during your turn based on the current circumstances:"
					+ "\n    - Bet: If a wager has not already been cast you can place some of your money down as a bet."
					+ "\n    - Raise: If a bet has already been placed you can increase it."
					+ "\n    - All-In: All of your money is allocated to the pot if you either choose to raise to such an amount, are "
					+ "calling to a bet equal to your stack plus your current bet, or cannot match the highest bet and do not "
					+ "wish to fold. Once this action is carried out you have committed completely to the round of play and "
					+ "must participate in the showdown. No other action can be carried out by a player who has gone all-in."
					+ "\n    - Call: If the highest wager is higher than yours you can match it to stay in the round of play without "
					+ "increasing the bet amount."
					+ "\n    - Check: If your bet matches the highest you can choose not to carry out an action and move to the next "
					+ "player’s turn."
					+ "\n    - Fold: At anytime if you do not wish to continue you can discard your hole and forfeit your wagered "
					+ "funds, unable to vie for the pot until the next round of play.");
			bodyC.setWrapText(true);
			bodyC.setMaxWidth(winWidth * (5.0 / 6.0));
			bodyC.getStyleClass().add("tutorial-body");
		
		slideC.getChildren().addAll(titleC, bodyC);
		
		VBox slideD = new VBox(); //The fourth slide explaining the blind round
		slideD.getStyleClass().add("custom-popup");
		slideD.setSpacing(20);
		slideD.setAlignment(Pos.CENTER);
		
			Label titleD = new Label("Blind Round");
			titleD.setWrapText(true);
			titleD.getStyleClass().add("tutorial-title");
			
			Label bodyD = new Label("The first betting round in a round of play is called the blind round, as no community have been dealt "
					+ "yet. After the deck is shuffled and each player’s holes are dealt the player with the blue chip, the small "
					+ "blind, must place a bet equal to the small blind chosen in the game setup. The player to their immediate "
					+ "left of them with the yellow chip, the big blind, must raise the bet to twice the small blind. These "
					+ "mandatory wagers ensure the action is initialized each round. The players’ turns continue clockwise  "
					+ "with the big blind having right of last action if their wager has not been raised. If the wager is raised all "
					+ "players must either fold, or match or exceed the wager. If all players have conceded to a wager or "
					+ "folded the next betting round begins once all of the wagers are added to the pot.");
			bodyD.setWrapText(true);
			bodyD.setMaxWidth(winWidth * (5.0 / 6.0));
			bodyD.getStyleClass().add("tutorial-body");
		
		slideD.getChildren().addAll(titleD, bodyD);
		
		VBox slideE = new VBox(); //The fifth slide explaining all general rounds
		slideE.getStyleClass().add("custom-popup");
		slideE.setSpacing(20);
		slideE.setAlignment(Pos.CENTER);
		
			Label titleE = new Label("Community Card Rounds");
			titleE.setWrapText(true);
			titleE.getStyleClass().add("tutorial-title");
			
			Label bodyE = new Label("The second round, occurring after the blind round, begins with the reveal of the first three community "
					+ "cards, referred to as the “flop”. The small blind has the first turn and the player with the white chip, the "
					+ "dealer, has the right of last action. There are no mandatory bets in this round, so it will only end when "
					+ "all players have checked the initial zero bet or folded, or matched a new bet or folded. As before, all "
					+ "player’s bets are added to the pot."
					+ "\n\n"
					+ "In the third round the fourth community card, “the turn”, is revealed and betting functions the same as "
					+ "the flop round."
					+ "\n\n"
					+ "The final community card, “the river” is revealed in the fourth betting round which functions "
					+ "identically to the previous two rounds.");
			bodyE.setWrapText(true);
			bodyE.setMaxWidth(winWidth * (5.0 / 6.0));
			bodyE.getStyleClass().add("tutorial-body");
		
		slideE.getChildren().addAll(titleE, bodyE);
		
		VBox slideF = new VBox(); //The sixth slide explaining the end of each round of play and the end of the game
		slideF.getStyleClass().add("custom-popup");
		slideF.setSpacing(20);
		slideF.setAlignment(Pos.CENTER);
		
			Label titleF = new Label("Showdown");
			titleF.setWrapText(true);
			titleF.getStyleClass().add("tutorial-title");
			
			Label bodyF = new Label("At the end of the river round all active players’ holes are revealed and the one who can form the highest "
					+ "five-card hand is awarded the pot. If two or more players have the same ranking highest hand the pot is "
					+ "divided evenly, with the difference from an odd split being given to the player closest to the left of the "
					+ "dealer."
					+ "\n\n"
					+ "Once the pot is distributed as appropriate all cards on the table return to the deck, the deck is shuffled, "
					+ "the blind and dealer chips move one player clockwise, and the next round of play begins from a new "
					+ "blind round."
					+ "\n\n"
					+ "If a player has no money left after the showdown they are “busted out”, meaning they have lost and can "
					+ "no longer participate. If only one player remains that has not busted out they win the game.");
			bodyF.setWrapText(true);
			bodyF.setMaxWidth(winWidth * (5.0 / 6.0));
			bodyF.getStyleClass().add("tutorial-body");
		
		slideF.getChildren().addAll(titleF, bodyF);
		
		slides.add(slideA); //All slides are added to the slide list
		slides.add(slideB);
		slides.add(slideC);
		slides.add(slideD);
		slides.add(slideE);
		slides.add(slideF);
	}
}
